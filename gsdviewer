#!/usr/bin/env python

# -*- coding: UTF8 -*-

### Copyright (C) 2008-2009 Antonio Valentino <a_valentino@users.sf.net>

### This file is part of GSDView.

### GSDView is free software; you can redistribute it and/or modify
### it under the terms of the GNU General Public License as published by
### the Free Software Foundation; either version 2 of the License, or
### (at your option) any later version.

### GSDView is distributed in the hope that it will be useful,
### but WITHOUT ANY WARRANTY; without even the implied warranty of
### MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
### GNU General Public License for more details.

### You should have received a copy of the GNU General Public License
### along with GSDView; if not, write to the Free Software
### Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA.

'''Launcher script for gsdview.'''

import datetime

class Timer(object):
    def __init__(self):
        self.start = datetime.datetime.now()
        self.last = self.start

    def elapsed(self):
        return datetime.datetime.now() - self.start

    def update(self):
        now = datetime.datetime.now()
        delta = now - self.last
        self.last = now
        return delta.seconds, delta.microseconds

def perform_imports(timer, splash):
    from PyQt4 import QtGui
    qApp = QtGui.qApp

    splash.showMessage(splash.tr('Import stdlib modules ...'))
    qApp.processEvents()
    for module in ('os', 're', 'sys', 'itertools'):
        __import__(module)
    logging.debug('stdlib imports: %d.%06ds' % timer.update())

    splash.showMessage(splash.tr('Import numpy module ...'))
    qApp.processEvents()
    import numpy
    logging.debug('numpy import: %d.%06ds' % timer.update())

    splash.showMessage(splash.tr('Import GDAL related modules ...'))
    qApp.processEvents()
    from osgeo import gdal, osr
    logging.debug('gdal/osr import %d.%06ds' % timer.update())

    splash.showMessage(splash.tr('Import PyQt4 modules ...'))
    qApp.processEvents()
    from PyQt4 import QtCore, QtGui
    logging.debug('Qt4 import %d.%06ds' % timer.update())

    splash.showMessage(splash.tr('Import GSDView modules ...'))
    qApp.processEvents()
    for module in ('info', 'utils', 'widgets', 'mainwin', 'gsdtools',
                   'qt4support', 'graphicsview',
                   'exectools', 'exectools.qt4tools',
                   'gdalbackend', #'gdalbackend.core', 'gdalbackend.gdalqt4',
                   #~ 'gdalbackend.widgets', 'gdalbackend.modelitems',
                   #~ 'gdalbackend.gdalsupport', 'gdalbackend.gdalexectools',
                   #~ 'gdalbackend.gdalbackend_resources',
                   ):
        __import__(module)

    from gsdview.gsdview import main
    logging.debug('gsdview import %d.%06ds' % timer.update())


if __name__ == '__main__':
    timer = Timer()

    ### logging ###############################################################
    import logging
    fmt = '%(levelname)s: %(filename)s line %(lineno)d in %(funcName)s: %(message)s'
    logging.basicConfig(level=logging.DEBUG, format=fmt)

    logging.debug('logging setup done after %d.%06ds: '
                  'start logging' % timer.update())

    ### splash screen #########################################################
    from PyQt4 import QtGui
    logging.debug('Qt4 import %d.%06ds' % timer.update())

    import gsdview.splash_resources
    logging.debug('splash resources import %d.%06ds' % timer.update())

    import sys
    app = QtGui.QApplication(sys.argv)
    pixmap = QtGui.QPixmap(':images/splash.svg')
    splash = QtGui.QSplashScreen(pixmap)
    splash.show()
    app.processEvents()

    logging.debug('splash screen setup %d.%06ds' % timer.update())
    splash.showMessage(app.tr('Splash screen setup completed'))
    app.processEvents()

    ### environment setup #####################################################
    splash.showMessage(app.tr('Setup environment ...'))
    app.processEvents()

    import os
    GSDVIEWROOT = os.path.dirname(os.path.abspath(
                                            gsdview.splash_resources.__file__))

    # @NOTE: needed for UI building of promoted widgets
    sys.path.insert(0, GSDVIEWROOT)

    # @NOTE: needed for path names variables expansion
    os.environ['GSDVIEWROOT'] = GSDVIEWROOT
    logging.debug('environment setup %d.%06ds' % timer.update())

    ### modules loading #######################################################
    perform_imports(timer, splash)

    ### GUI ###################################################################
    splash.showMessage(app.tr('Build GUI ...'))
    app.processEvents()
    from gsdview.gsdview import GSDView
    mainwin = GSDView()
    mainwin.show()
    logging.debug('GUI setup %d.%06ds' % timer.update())

    ### close splash and run app ##############################################
    splash.finish(mainwin)
    app.processEvents()
    sys.exit(app.exec_())
